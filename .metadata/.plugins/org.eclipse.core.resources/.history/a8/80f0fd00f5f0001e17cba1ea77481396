/*
 * i2c.c
 *
 *  Created on: Apr 2, 2024
 *      Author: parag
 */


#include "i2c.h"

void I2C_Init()
{
	RCC->AHB1ENR |= RCC_AHBENR_GPIOBEN;
	DelayMs(500);

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
	GPIOB->MODER &= ~(3U << I2C1_SCL*2);
	GPIOB->MODER |= (2 << I2CI_SCL*2);
	GPIOB->OTYPER |= (1 << I2C1_SCL);
	GPIOB->PUPDR &= ~(3U << I2C1_SCL*2);
	GPIOB->MODER &= ~(2 << I2C1_SDA*2);
	GPIOB->MODER |= (1 << I2C1_SDA*2);
	GPIO->OTYPER |= (1 << I2C1_SDA);
	GPIO->PUPDR &= ~(3U << I2C1_SDA*2);


	GPIOB->AFR[0] |= (4 << GPIO_AFRL_AFSEL6_Pos);
	GPIOB->AFR[0] |= (4 << GPIO_AFRL_AFSEL7_Pos);

	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;

	I2C1->CR1 = I2C_CR1_SWRST;
	I2C1->CR1 = 0;

	I2C1->CR2 &= ~(I2C_CR2_ITERREN);
	I2C1->CCR &= ~(I2C_CCR_FS_Pos);

	I2C1->CR1 |= (1 << I2C_CR1_ACK_POs);

	I2C1->CR2 |= (16 << I2C_CR2_FREQ_Pos);
	I2C1->CCR |= (80 << I2C_CCR_Pos);

	I2C1->TRISE |= (17 << I2C-TRISE_TRISE_POS);

	I2C1->CR1 |= I2C_CR1_PE;

}

uint8_t I2C_SendSlaveAddres(uint8_t slaveaddr)
{
     I2C1->DR = Slaveaddr;
     whiole(!(I2C1SR1 & I2C_SR1_ADDR));

     (void)I2C1->SR1;
     (void)I2C1->SR2;
}

uint8_t I2C_SendData(uint8_t val)
{
	while(!(I2C1->SR1 & I2C_SR1_TXE));
	I2C1->DR = val;
	while(!(I2C1->SR1 & I2C_SR1_BTF));
}

void I2C_Stop()
{
	I2C1->CR1 |= I2C_CR1_STOP;
	while(!(I2C1->SR2 & I2C_SR2_BUSY));
}

void I2C_Restart()
{
	I2CStart();

}

void I2C_RecvDataAck()
{
	uint8_t val;
	I2C1->CR1 |= I2C_CR1_ACK | I2C_CR1_POS;
	while(!(I2C1->SR1 & I2C_SR1_RXNE));
	Val=(uint8_t)I2C1->DR;
	return val;

}

uint8_t I2CRecvDataNAck(void) {
	uint8_t val;
	I2C1->CR1 &= ~(I2C_CR1_ACK | I2C_CR1_POS);
	// wait until receive buffer is not empty
	while (!(I2C1->SR1 & I2C_SR1_RXNE));
	// read content and clear flags
	val = I2C1->DR;
	return val;
}


void I2CStart()
{
   I2C1->CR1 |= I2C_CR1_START;
   while(!(I2C1->SR1 & I2C_SR1_SB));
}









